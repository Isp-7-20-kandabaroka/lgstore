import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import aiohttp
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InputFile
import os
import random
import string
import pandas as pd

API_TOKEN = '7480809961:AAG5S-O_6bV8QFkknOYPTkUk91zVag_nL_U'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# ID –≤–∞—à–µ–≥–æ –ø–∞–±–ª–∏–∫–∞
CHANNEL_ID = -1001801607613
welcome_text = "–î–∞—Ä–∏–º –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ —Å–æ—Ü —Å–µ—Ç–∏ –ø—É—à–µ—á–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞."
subscribed_users = {}

class PromoCodeStates(StatesGroup):
    DELETE_PROMO_CODE = State()
    ADD_PROMO_CODE = State()

issued_promo_codes = {}

promo_codes = []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
def generate_promo_code():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Excel
def save_to_excel(data, file_path="promo_codes.xlsx"):
    df = pd.DataFrame(data)
    df.to_excel(file_path, index=False)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rm
@dp.message_handler(commands=['rm'])
async def change_welcome_text(message: types.Message):
    global welcome_text  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫ —Å–ø–∏—Å–∫—É allowed_users
    allowed_users = [5429082466, 713476634, 832507232, 1036129367]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if message.from_user.id in allowed_users:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_text = message.text.split('/rm', 1)[-1].strip()
        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π welcome_text
        welcome_text = new_text
        print("–¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω:", welcome_text)  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        await message.answer("–¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    global new_text  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscribed = await is_user_subscribed(user_id)

    if subscribed:
        keyboard = InlineKeyboardMarkup(row_width=1)

        # –ö–Ω–æ–ø–∫–∏
        subscribe_button = InlineKeyboardButton(text="–ù–∞—à –¢–ì üì¢", url="https://t.me/legit_check_store")
        get_code_button = InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="get_code")

        # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å—Å—ã–ª–∫–∏
        youtube_button = InlineKeyboardButton(text="–ù–∞—à YouTube üì∫",
                                              url="https://youtube.com/@Legit_check_store?si=dU7TDbdvNJZEeWVP")
        instagram_button = InlineKeyboardButton(text="–ù–∞—à Instagram üì∏",
                                                url="https://www.instagram.com/legit.check.store?igsh=MWN3ZGs2OTUzYjI1bg%3D%3D&utm_source=qr")
        vk_button = InlineKeyboardButton(text="–ù–∞—à VK üìò", url="https://vk.com/lcstore_vk")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard.add(subscribe_button, youtube_button, instagram_button, vk_button, get_code_button)

        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        photo_path = "main.jpeg"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer_photo(
            photo=InputFile(os.path.abspath(photo_path)),
            caption=f"–° –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ Legit Check Store!üî• \n- - - - - -\n{welcome_text}\n- - - - - -\n–ñ–º–∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥",
            reply_markup=keyboard
        )
    else:
        keyboard = InlineKeyboardMarkup(row_width=1)

        # –ö–Ω–æ–ø–∫–∏
        subscribe_button = InlineKeyboardButton(text="–ù–∞—à —Ç–≥ üì¢", url="https://t.me/legit_check_store")
        # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å—Å—ã–ª–∫–∏
        youtube_button = InlineKeyboardButton(text="–ù–∞—à YouTube üì∫",
                                              url="https://youtube.com/@Legit_check_store?si=dU7TDbdvNJZEeWVP")
        instagram_button = InlineKeyboardButton(text="–ù–∞—à Instagram üì∏",
                                                url="https://www.instagram.com/legit.check.store?igsh=MWN3ZGs2OTUzYjI1bg%3D%3D&utm_source=qr")
        vk_button = InlineKeyboardButton(text="–ù–∞—à VK üìò", url="https://vk.com/lcstore_vk")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard.add(youtube_button, instagram_button, vk_button, subscribe_button)

        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        photo_path = "main.jpeg"
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer_photo(
            photo=InputFile(os.path.abspath(photo_path)),
            caption=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ Legit Check Store! üî•\n- - - - - -\n{welcome_text}",
            reply_markup=keyboard
        )
        await message.answer(
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–∞–∂–º–∏ –Ω–∞ —Å–∏–Ω—é—é –Ω–∞–¥–ø–∏—Å—å -> /start"
        )

@dp.callback_query_handler(lambda c: c.data == 'get_code')
async def process_callback_get_code(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_name = callback_query.from_user.first_name
    if user_id in issued_promo_codes:
        promo_code = issued_promo_codes[user_id]
        await bot.send_message(callback_query.from_user.id, f"–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: {promo_code}")
    else:
        promo_code = generate_promo_code()
        issued_promo_codes[user_id] = promo_code
        promo_data = {
            'user_id': user_id,
            'user_name': user_name,
            'promo_code': promo_code
        }
        promo_codes.append(promo_data)
        save_to_excel(promo_codes)
        await bot.send_message(callback_query.from_user.id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: {promo_code}")

@dp.message_handler(commands=['list'])
async def send_promo_list(message: types.Message):
    if message.from_user.id in [5429082466, 713476634, 832507232, 1036129367]:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        file_path = "promo_codes.xlsx"
        if os.path.exists(file_path):
            await message.answer_document(InputFile(file_path))
        else:
            await message.answer("–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

async def is_user_subscribed(user_id):
    async with aiohttp.ClientSession() as session:
        async with session.post(
            f'https://api.telegram.org/bot{API_TOKEN}/getChatMember',
            json={'chat_id': CHANNEL_ID, 'user_id': user_id}
        ) as response:
            data = await response.json()
            logging.info(f'getChatMember response: {data}')  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            if response.status == 200:
                status = data['result']['status']
                logging.info(f'User {user_id} status: {status}')
                return status in ['member', 'creator', 'administrator']
            else:
                logging.error(f'Error checking subscription: {data}')
                return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø–∞–±–ª–∏–∫–∞
async def is_user_admin_or_owner(user_id):
    async with aiohttp.ClientSession() as session:
        async with session.post(
            f'https://api.telegram.org/bot{API_TOKEN}/getChatMember',
            json={'chat_id': CHANNEL_ID, 'user_id': user_id}
        ) as response:
            data = await response.json()
            logging.info(f'getChatMember admin/owner response: {data}')  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            if response.status == 200:
                status = data['result']['status']
                logging.info(f'User {user_id} admin status: {status}')
                return status in ['creator', 'administrator']
            else:
                logging.error(f'Error checking admin/owner status: {data}')
                return False

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
