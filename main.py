import logging
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import aiohttp
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InputFile
import os

API_TOKEN = '7480809961:AAG5S-O_6bV8QFkknOYPTkUk91zVag_nL_U'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# ID –≤–∞—à–µ–≥–æ –ø–∞–±–ª–∏–∫–∞
CHANNEL_ID = -1001801607613
welcome_text = "–î–∞—Ä–∏–º –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ —Å–æ—Ü —Å–µ—Ç–∏ –ø—É—à–µ—á–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞."
subscribed_users = {}
class PromoCodeStates(StatesGroup):
    DELETE_PROMO_CODE = State()
    ADD_PROMO_CODE = State()
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
issued_promo_codes = {}

promo_codes = []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–±–ª–∏–∫–µ
async def check_membership(user_id):
    subscribed = await is_user_subscribed(user_id)
    admin_or_owner = await is_user_admin_or_owner(user_id)
    return subscribed or admin_or_owner
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

@dp.message_handler(commands=['rm'])
async def change_welcome_text(message: types.Message):
    global welcome_text  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫ —Å–ø–∏—Å–∫—É allowed_users
    allowed_users = [5429082466, 713476634, 832507232, 1036129367]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if message.from_user.id in allowed_users:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_text = message.text.split('/rm', 1)[-1].strip()
        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π welcome_text

        welcome_text = new_text
        print("–¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω:", welcome_text)  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        await message.answer("–¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    global new_text  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscribed = await is_user_subscribed(user_id)

    if subscribed:
        keyboard = InlineKeyboardMarkup(row_width=1)

        # –ö–Ω–æ–ø–∫–∏
        subscribe_button = InlineKeyboardButton(text="–ù–∞—à –¢–ì üì¢", url="https://t.me/legit_check_store")
        get_code_button = InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="get_code")

        # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å—Å—ã–ª–∫–∏
        youtube_button = InlineKeyboardButton(text="–ù–∞—à YouTube üì∫",
                                              url="https://youtube.com/@Legit_check_store?si=dU7TDbdvNJZEeWVP")
        instagram_button = InlineKeyboardButton(text="–ù–∞—à Instagram üì∏",
                                                url="https://www.instagram.com/legit.check.store?igsh=MWN3ZGs2OTUzYjI1bg%3D%3D&utm_source=qr")
        vk_button = InlineKeyboardButton(text="–ù–∞—à VK üìò", url="https://vk.com/lcstore_vk")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard.add(subscribe_button, youtube_button, instagram_button, vk_button, get_code_button)

        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        photo_path = "main.jpeg"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer_photo(
            photo=InputFile(os.path.abspath(photo_path)),
            caption=f"–° –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ Legit Check Store!üî• \n- - - - - -\n{welcome_text}\n- - - - - -\n–ñ–º–∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥",
            reply_markup=keyboard
        )
    else:

            keyboard = InlineKeyboardMarkup(row_width=1)

            # –ö–Ω–æ–ø–∫–∏
            subscribe_button = InlineKeyboardButton(text="–ù–∞—à —Ç–≥ üì¢", url="https://t.me/legit_check_store")
            # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å—Å—ã–ª–∫–∏
            youtube_button = InlineKeyboardButton(text="–ù–∞—à YouTube üì∫",
                                                  url="https://youtube.com/@Legit_check_store?si=dU7TDbdvNJZEeWVP")
            instagram_button = InlineKeyboardButton(text="–ù–∞—à Instagram üì∏",
                                                    url="https://www.instagram.com/legit.check.store?igsh=MWN3ZGs2OTUzYjI1bg%3D%3D&utm_source=qr")
            vk_button = InlineKeyboardButton(text="–ù–∞—à VK üìò", url="https://vk.com/lcstore_vk")

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard.add( youtube_button, instagram_button, vk_button, subscribe_button)

            # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
            photo_path = "main.jpeg"
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await message.answer_photo(
                photo=InputFile(os.path.abspath(photo_path)),
                caption=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ Legit Check Store! üî•\n- - - - - -\n{welcome_text}",
                reply_markup=keyboard
            )
            await message.answer(
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–∞–∂–º–∏ –Ω–∞ —Å–∏–Ω—é—é –Ω–∞–¥–ø–∏—Å—å -> /start"
            )





async def is_user_subscribed(user_id):
    async with aiohttp.ClientSession() as session:
        async with session.post(
            f'https://api.telegram.org/bot{API_TOKEN}/getChatMember',
            json={'chat_id': CHANNEL_ID, 'user_id': user_id}
        ) as response:
            data = await response.json()
            if response.status == 200:
                return data['result']['status'] == 'member'
            else:
                return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø–∞–±–ª–∏–∫–∞
async def is_user_admin_or_owner(user_id):
    async with aiohttp.ClientSession() as session:
        async with session.post(
            f'https://api.telegram.org/bot{API_TOKEN}/getChatMember',
            json={'chat_id': CHANNEL_ID, 'user_id': user_id}
        ) as response:
            data = await response.json()
            if response.status == 200:
                status = data['result']['status']
                return status in ['creator', 'administrator']
            else:
                return False

@dp.message_handler(commands=['code'])
async def code(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    allowed_users = [5429082466, 713476634,832507232]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_id = message.from_user.id
    if user_id in allowed_users:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        if promo_codes:
            promo_codes_list = "\n".join([f"{index + 1}. {code}" for index, code in enumerate(promo_codes)])
            await message.answer(
                f"–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:\n{promo_codes_list}\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                reply_markup=InlineKeyboardMarkup().row(
                    InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="add_code"),
                    InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="delete_code")
                )
            )
        else:
            await message.answer("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø—É—Å—Ç.\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                                 reply_markup=InlineKeyboardMarkup().row(
                                     InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="add_code")
                                 ))
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–æ—Å—Ç—É–ø–∞
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")



def add_promo_code(code):
    promo_codes.append(code)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"
@dp.callback_query_handler(lambda c: c.data == 'get_code')
async def get_code(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_name = callback_query.from_user.first_name
    if promo_codes:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –≤—ã–¥–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if user_id in issued_promo_codes:
            # –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –≤—ã–¥–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
            await callback_query.message.answer(f"–¢–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥: {issued_promo_codes[user_id]}")
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥, –≤—ã–¥–∞–µ–º –µ–º—É —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ
            random_promo_code = random.choice(promo_codes)
            issued_promo_codes[user_id] = random_promo_code
            await callback_query.message.answer(f"–¢–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥: {random_promo_code}")
    else:
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ promo_codes –ø—É—Å—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback_query.message.answer("–ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç.")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –ø–∞–±–ª–∏–∫
@dp.message_handler(content_types=['new_chat_members'])
async def on_new_chat_members(message: types.Message):
    for user in message.new_chat_members:
        if user.id == bot.id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ - —ç—Ç–æ –Ω–∞—à –±–æ—Ç
            # –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            subscribed_users[message.chat.id] = True
            logging.info(f"–ë–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–∞–±–ª–∏–∫ {message.chat.title}")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"
@dp.callback_query_handler(lambda c: c.data == 'delete_code')
async def delete_code(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é):")
    await PromoCodeStates.DELETE_PROMO_CODE.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message_handler(state=PromoCodeStates.DELETE_PROMO_CODE)
async def process_delete_promo_code(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –µ–≥–æ –Ω–∞ –∏–Ω–¥–µ–∫—Å—ã
    indexes_str = message.text
    indexes = []
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã –≤ —á–∏—Å–ª–∞
        indexes = [int(index.strip()) for index in indexes_str.replace(',', ' ').split()]
    except ValueError:
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å—ã —á–∏—Å–ª–∞–º–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–æ–º –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    if any(index < 1 or index > len(promo_codes) for index in indexes):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–∞–º
    deleted_promo_codes = [promo_codes.pop(index - 1) for index in sorted(indexes, reverse=True)]
    await state.finish()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
    deleted_promo_codes_str = '\n'.join(deleted_promo_codes)
    await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã:\n{deleted_promo_codes_str}")
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"
@dp.callback_query_handler(lambda c: c.data == 'add_code')
async def add_code(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥:")
    await PromoCodeStates.ADD_PROMO_CODE.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message_handler(state=PromoCodeStates.ADD_PROMO_CODE)
async def process_add_promo_code(message: types.Message, state: FSMContext):
    new_code = message.text
    add_promo_code(new_code)
    await state.finish()
    await message.answer("–ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
